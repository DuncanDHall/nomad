#!/bin/zsh -ex

# Creates a single node nomad cluster, running inside docker.
#
# Assumes you are creating cluster with debian/ubuntu VMs/baremetals,
# that you have ssh and sudo access to.
#
# Current Overview:
#   Installs nomad server and client.
#   Installs consul server and client.
#   Installs load balancer "fabio".

MYDIR=${0:a:h}


[ $# -lt 1 ]  &&  echo "
usage: $0  [TLS_CRT file]  [TLS_KEY file]

[TLS_CRT file] - file location. wildcard domain PEM format.
[TLS_KEY file] - file location. wildcard domain PEM format.

Run this script on your VM.
(git clone this repo somewhere on your VM).

To simplify, we'll reuse TLS certs, setting up ACL and TLS for nomad.

"  &&  exit 1


# avoid any environment vars from CLI poisoning..
unset   NOMAD_TOKEN
unset  CONSUL_TOKEN


function main() {
  if [ $# -lt 2 ]; then
    hind
    exit 0
  fi

  TLS_CRT=$1  # @see create-https-certs.sh - fully qualified path to crt file it created
  TLS_KEY=$2  # @see create-https-certs.sh - fully qualified path to key file it created
  shift
  shift

  set -x
  config

  # install & setup stock nomad & consul
  baseline

  # customize nomad & consul
  customize

  sudo rm /opt/consul/serf/local.keyring
  sudo $SCTL restart consul

  finish
}


function hind() {
  DOM=us.archive.org
  TLSD=$HOME/dev/nomad/certs

  # install docker if not already present
  $MYDIR/install-docker-ce.sh

  ssh home sudo chmod 444 ${TLSD?}/${DOM?}-key.pem # xxx FFS
  sudo mkdir -p -m777 /etc/fabio
  sudo docker run --rm -it --name hind  \
    --net=host  \
    --privileged  \
    -v /var/run/docker.sock:/var/run/docker.sock  \
    -v $HOME/dev/nomad:/app  \
    -v ${TLSD}:/tls  \
    -v /etc/fabio:/etc/fabio  \
    -e DEBIAN_FRONTEND=noninteractive  \
    -e TZ=Etc/UTC  \
    ubuntu:focal bash -c "
  apt-get -yqq update;
  apt-get -yqq --no-install-recommends install  zsh;
  cd /app;
  /app/hind /tls/${DOM?}-cert.pem /tls/${DOM?}-key.pem;
  zsh
  "
  ssh home sudo chmod 400 ${TLSD?}/${DOM?}-key.pem # xxx FFS
}


function config() {
  FIRST=$(hostname -f)

  export  NOMAD_ADDR="https://${FIRST?}:4646"
  export CONSUL_ADDR="http://localhost:8500"
  export  FABIO_ADDR="http://localhost:9998"
  export FIRSTIP=$(host ${FIRST?} | perl -ane 'print $F[3] if $F[2] eq "address"')
  export SCTL=supervisorctl

  # find daemon config files
   NOMAD_HCL=$(dpkg -L nomad  2>/dev/null |egrep ^/etc/ |egrep -m1 '\.hcl$' || echo -n '')
  CONSUL_HCL=$(dpkg -L consul 2>/dev/null |egrep ^/etc/ |egrep -m1 '\.hcl$' || echo -n '')
}


function baseline() {
  cd /tmp

  apt-get -yqq --no-install-recommends install  sudo  rsync  dnsutils  supervisor

  $MYDIR/install-docker-ce.sh

  # install binaries and service files
  #   eg: /usr/bin/nomad  /etc/nomad.d/nomad.hcl  /usr/lib/systemd/system/nomad.service

  curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
  sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
  sudo apt-get -yqq update

  sudo apt-get -yqq install  nomad  consul

  config

  # start up uncustomized versions of nomad and consul
  setup-certs
  setup-misc
  setup-daemons
}


function customize() {
  setup-nomad
  setup-consul
  set +x

  echo "================================================================================"
  consul members
  echo "================================================================================"
  nomad-env-vars
  nomad server members
  echo "================================================================================"



  # NOTE: if you see failures join-ing and messages like:
  #   "No installed keys could decrypt the message"
  # try either (depending on nomad or consul) inspecting all nodes' contents of file) and:
  echo 'skipping .keyring resets'  ||  (
    sudo rm /opt/nomad/data/server/serf.keyring; sudo $SCTL restart nomad
    sudo rm /opt/consul/serf/local.keyring;      sudo $SCTL restart consul
  )


  echo "================================================================================"
  ( set -x; consul members )
  echo "================================================================================"
  ( set -x; nomad server members )
  echo "================================================================================"
  ( set -x; nomad node status )
  echo "================================================================================"
}


function finish() {
  sleep 30

  nomad-env-vars
  nomad run ${MYDIR?}/etc/fabio.hcl

  echo "

ðŸ’¥ CONGRATULATIONS!  Your cluster is setup. ðŸ’¥

You can get started with the UI for: nomad consul fabio here:

Nomad  (deployment: managements & scheduling):
( https://www.nomadproject.io )
$NOMAD_ADDR
( login with NOMAD_TOKEN from $HOME/.config/nomad - keep this safe!)

Consul (networking: service discovery & health checks, service mesh, envoy, secrets storage):
( https://www.consul.io )
$CONSUL_ADDR

Fabio  (routing: load balancing, ingress/edge router, https and http2 termination (to http))
( https://fabiolb.net )
$FABIO_ADDR



For localhost urls above - see 'nom-tunnel' alias here:
  https://gitlab.com/internetarchive/nomad/-/blob/master/aliases
"
}


function setup-consul() {
  ## Consul - setup the fields 'encrypt' etc. as per your cluster.

  TOK_C=$(consul keygen |tr -d ^)

  echo '
server = true
advertise_addr = "{{ GetInterfaceIP \"eth0\" }}"
node_name = "'$(hostname -s)'"
bootstrap_expect = 1
encrypt = "'${TOK_C?}'"
retry_join = ["'${FIRSTIP?}'"]
' | sudo tee -a  $CONSUL_HCL

  sudo $SCTL restart consul  &&  sleep 10
}


function setup-nomad() {
  ## Nomad - setup the fields 'encrypt' etc. as per your cluster.
  sudo sed -i -e 's^bootstrap_expect =.*$^bootstrap_expect = 1^' $NOMAD_HCL

  ( configure-nomad ) | sudo tee -a $NOMAD_HCL

  sudo $SCTL restart nomad  &&  sleep 10
}


function configure-nomad() {
  TOK_N=$(nomad operator keygen |tr -d ^ |cat)

  echo '
name = "'$(hostname -s)'"

server {
  encrypt = "'${TOK_N?}'"

  server_join {
    retry_join = ["'${FIRSTIP?}'"]
    retry_max = 0
  }
}

# some of this could be redundant -- check defaults in node v1+
addresses {
  http = "0.0.0.0"
}

advertise {
  http = "{{ GetInterfaceIP \"eth0\" }}"
  rpc = "{{ GetInterfaceIP \"eth0\" }}"
  serf = "{{ GetInterfaceIP \"eth0\" }}"
}

plugin "docker" {
  config {
    volumes {
      enabled = true
    }
  }
}

plugin "raw_exec" {
  config {
    enabled = true
  }
}

# @see https://learn.hashicorp.com/nomad/transport-security/enable-tls
acl {
  enabled = true
}
tls {
  http = true
  cert_file = "/opt/nomad/tls/tls.crt"
  key_file  = "/opt/nomad/tls/tls.key"
}


client {
  meta {
    "kind" = "worker,lb"
  }

  host_volume "pv" {
    path      = "/pv"
    read_only = false
  }

  host_volume "home-ro" {
    path      = "/home"
    read_only = true
  }

  host_volume "home-rw" {
    path      = "/home"
    read_only = false
  }
}'

  set -x
}


function nomad-env-vars() {
  mkdir -p $HOME/.config
  CONF=$HOME/.config/nomad

  local NOMACL=$HOME/.config/nomad.$(echo ${FIRST?} |cut -f1 -d.)
  mkdir -p $(dirname $NOMACL)
  chmod 600 $NOMACL $CONF 2>/dev/null |cat
  nomad acl bootstrap |tee $NOMACL
  # NOTE: can run `nomad acl token self` post-facto if needed...
  echo "
export NOMAD_ADDR=$NOMAD_ADDR
export NOMAD_TOKEN="$(fgrep 'Secret ID' $NOMACL |cut -f2- -d= |tr -d ' ') |tee $CONF
  chmod 400 $NOMACL $CONF

  source $CONF
}



function setup-misc() {
  sudo mkdir -m777 -p /pv
}


function setup-daemons() {
  # get services ready to go
  echo "
[program:nomad]
command=/usr/bin/nomad  agent -config     /etc/nomad.d
autorestart=true
startsecs=10

[program:consul]
command=/usr/bin/consul agent -config-dir=/etc/consul.d/
autorestart=true
startsecs=10
" >| /etc/supervisor/conf.d/hind.conf
  supervisord
}


function setup-certs() {
  # sets up https / TLS  and fabio for routing, loadbalancing, and https traffic
  local DOMAIN=$(echo $FIRST |cut -f2- -d.)
  local CRT=/etc/fabio/ssl/${DOMAIN?}-cert.pem
  local KEY=/etc/fabio/ssl/${DOMAIN?}-key.pem

  sudo mkdir -p        /etc/fabio/ssl/
  sudo chown root:root /etc/fabio/ssl/
  cat ${MYDIR?}/etc/fabio.properties |sudo tee /etc/fabio/fabio.properties

  sudo cp -p  ${TLS_CRT?} ${CRT?}
  sudo cp -p  ${TLS_KEY?} ${KEY?}

  sudo chown root.root ${CRT} ${KEY}
  sudo chmod 444 ${CRT}
  sudo chmod 400 ${KEY}


  sudo mkdir -m 500 -p      /opt/nomad/tls
  sudo cp $CRT              /opt/nomad/tls/tls.crt
  sudo cp $KEY              /opt/nomad/tls/tls.key
  sudo chown -R nomad.nomad /opt/nomad/tls
  sudo chmod -R go-rwx      /opt/nomad/tls
}


main "$@"
